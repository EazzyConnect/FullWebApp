<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ResumeMaker</title>
  <link rel="icon" href="/images/resumee.jpeg" type="image/x-icon">
  <link rel="stylesheet" href="/profile.css">
  <script src="https://kit.fontawesome.com/4aac937350.js" crossorigin="anonymous"></script>
</head>

<body>

  <section>

    <header>

      <div class="leftTop">
        <img class="titleImage" src="/images/Title-Logo.png" alt="titleImage">
        <a href="profile" class="myHome">My Profile</a>
      </div>

      <nav>
        <a class="editP" href="profile/edit">Create and Edit Resume</a>
        {{!-- <a class="usersP" href="/users">Search Users</a> --}}
        <button class="logoutButton">LOG-OUT</button>
      </nav>

    </header>

    <div class="welcome">

      <h3 class="leftTime" id="time"></h3>
      <h3 class="rightTime" id="currentTime"></h3>

    </div>

    <div class="role">

      <p class="roleText"> Role: {{data.role}}</p>

      <a class="downloadBtn" href="profile/download">Download Resume</a>

    </div>


    <div class="container">

      <div class="intro">

        {{!-- <div class="pix">

          <form action="/users/profile/upload" method="post" enctype="multipart/form-data">

            <img src="" alt="image" id="previewImage" style="max-width: 100%; max-height: 200px">
            <input type="file" name="image" id="imageInput" accept=".jpeg, .jpg, .png" onchange="previewImage(event)">

            <button type="submit">Upload</button>

          </form>

          <h5>{{data.firstName}} {{data.lastName}}</h5>

        </div> --}}

        <p class="introAbout"> <span class="abtText">About me:</span>
          <br> <br>
          {{data.aboutMe}}
        </p>

      </div>

      <br><br><br>

      <div class="resumeView">

        <div id="head">

          <h2 class="fullName"> {{data.firstName}} {{data.lastName}} {{data.otherName}}</h2>

          <div class="contactInfo">

            <h5><i class="fa-solid fa-location-dot"></i> Home: {{data.address}}</h5>

            <div class="contactInfoInner1">
              <h5><i class="fa-solid fa-phone"></i> Phone: +234{{data.phoneNumber}}</h5>
              <h5><i class="fa-solid fa-envelope"></i> Email: {{data.email}}</h5>
            </div>

            <div class="contactInfoInner2">
              <h5><i class="fa-solid fa-globe"></i> Website: {{data.website}}</h5>
              <h5><i class="fa-brands fa-facebook"></i> Facebook: {{data.links.[1].title}}</h5>
            </div>

          </div>

        </div>

        <div class="aboutMe">

          <h5 id="abtMe">ABOUT ME</h5>
          <p id="abtMeText">{{data.aboutMe}}</p>

        </div>

        <hr>

        <div class="experience">

          <h5 class="expTitle">WORK EXPERIENCE</h5>

          {{#each data.workExperience as |experience index|}}

          <div>
            <div class="expBox">

              <h6 class="date">[ {{experience.date}} ]</h6>

              <div class="experienceInner">
                <p class="position">{{experience.position}}</p>
                <p class="employer">{{experience.employer}}</p>
                <p class="location">{{experience.location}}</p>

                {{#each experience.dutiesAndAchievements as |duty|}}

                <ul>
                  <li> {{duty}}
                  </li>
                </ul>

                {{/each}}

                <div class="taskBtn">
                  <button class="deleteBtn" onclick="deleteExperience('{{../type}}', {{index}})">Delete</button>

                  <button class="editBtn" onclick="showExpEditForm('{{../type}}', {{index}})">Edit</button>
                </div>

              </div>

            </div>

            <form id="editExpForm{{index}}" class="editForm hiddenForm">

              <label for="date{{index}}">Date:</label>
              <input type="text" id="date{{index}}" name="date" value="{{experience.date}}">

              <br>

              <label for="position{{index}}">Position:</label>
              <input type="text" id="position{{index}}" name="position" value="{{experience.position}}">

              <br>

              <label for="employer{{index}}">Employer:</label>
              <input type="text" id="employer{{index}}" name="employer" value="{{experience.employer}}">

              <br>

              <label for="location{{index}}">Location:</label>
              <input type="text" id="location{{index}}" name="location" value="{{experience.location}}">

              <br>

              <label for="dutiesAndAchievements{{index}}">Duties and Achievements:</label>

              <br>

              <textarea id="dutiesAndAchievements{{index}}"
                name="dutiesAndAchievements">{{experience.dutiesAndAchievements}}</textarea>

              <br>

              <button class="editBtn" type="button" onclick="saveExpChanges('{{../type}}', {{index}})">Save
                Changes</button>

              <button class="editBtn" type="button" onclick="cancel()">Cancel</button>
            </form>

          </div>

          {{/each}}

        </div>

        <hr>

        <div class="education">

          <h5 class="eduTitle">EDUCATION AND TRAINING</h5>

          {{#each data.educationAndTraining as |education index|}}

          <div>

            <div class="expBox">

              <h6 class="date">[ {{education.date}} ]</h6>

              <div class="educationInner">
                <p class="degree">{{education.degree}}</p>
                <p class="institution">{{education.institutionAttended}}</p>
                <p class="location">{{education.location}}</p>

                {{#each education.projectAndAchievement as |project|}}

                <ul>
                  <li> {{project}}
                  </li>
                </ul>

                {{/each}}

                <div class="taskBtn">
                  <button class="deleteBtn" onclick="deleteEducation('{{../type}}', {{index}})">Delete</button>

                  <button class="editBtn" onclick="showEduForm('{{../type}}', {{index}})">Edit</button>
                </div>

              </div>

            </div>

            <form id="editEduForm{{index}}" class="editForm hiddenForm">

              <label for="dateEdu{{index}}">Date:</label>
              <input type="text" id="dateEdu{{index}}" name="date" value="{{education.date}}">

              <br>

              <label for="instAttended{{index}}">Institition Attended:</label>
              <input type="text" id="instAttended{{index}}" name="institutionAttended"
                value="{{education.institutionAttended}}">

              <br>

              <label for="degree{{index}}">Degree:</label>
              <input type="text" id="degree{{index}}" name="degree" value="{{education.degree}}">

              <br>

              <label for="locationEdu{{index}}">Location:</label>
              <input type="text" id="locationEdu{{index}}" name="location" value="{{education.location}}">

              <br>

              <label for="projectAndAchievement{{index}}">Duties and Achievements:</label>

              <br>

              <textarea id="projectAndAchievement{{index}}"
                name="projectAndAchievement">{{education.projectAndAchievement}}</textarea>

              <br>

              <button class="editBtn" type="button" onclick="saveEdu('{{../type}}', {{index}})">Save Changes</button>

              <button class="editBtn" type="button" onclick="cancel()">Cancel</button>
            </form>

          </div>

          {{/each}}

        </div>

        <hr>

        <div class="profOrg">

          <h5 class="progOrgTitle">PROFESSIONAL ORGANIZATION</h5>

          {{#each data.professionalOrganization as |profOrg index|}}

          <div>
            <div class="expBox">

              <h6 class="date">[ {{profOrg.date}} ]</h6>

              <div class="profOrgInner">

                <p class="certification">{{profOrg.certification}}</p>
                <p class="organization">{{profOrg.organization}}</p>
                <p class="location">{{profOrg.location}}</p>
                <p class="website">{{profOrg.website}}</p>

                <div class="taskBtn">

                  <button class="deleteBtn" onclick="deleteProfOrg('{{../type}}', {{index}})">Delete</button>

                  <button class="editBtn" onclick="showProfForm('{{../type}}', {{index}})">Edit</button>
                </div>

              </div>

            </div>

            <form id="editProfForm{{index}}" class="editForm hiddenForm">

              <label for="dateProf{{index}}">Date:</label>
              <input type="text" id="dateProf{{index}}" name="date" value="{{profOrg.date}}">

              <br>

              <label for="organization{{index}}">Organization:</label>
              <input type="text" id="organization{{index}}" name="organization" value="{{profOrg.organization}}">

              <br>

              <label for="certification{{index}}">Certification:</label>
              <input type="text" id="certification{{index}}" name="certification" value="{{profOrg.certification}}">

              <br>

              <label for="locationProf{{index}}">Location:</label>
              <input type="text" id="locationProf{{index}}" name="location" value="{{profOrg.location}}">

              <br>

              <label for="website{{index}}">Website:</label>
              <input type="text" id="website{{index}}" name="website" value="{{profOrg.website}}">

              <br>

              <button class="editBtn" type="button" onclick="saveProf('{{../type}}', {{index}})">Save Changes</button>

              <button class="editBtn" type="button" onclick="cancel()">Cancel</button>
            </form>

          </div>

          {{/each}}

        </div>

        <hr>

        <div class="otherExperience">

          <h5 class="othExpTitle">OTHER EXPERIENCE</h5>

          {{#each data.otherExperience as |otherExperience index|}}

          <div>
            <div class="expBox">

              <h6 class="date">[ {{otherExperience.date}} ]</h6>

              <div class="otherExperienceInner">
                <p class="position">{{otherExperience.position}}</p>
                <p class="employer">{{otherExperience.employer}}</p>
                <p class="location">{{otherExperience.location}}</p>

                {{#each otherExperience.dutiesAndAchievements as |duty|}}

                <ul>
                  <li> {{duty}}
                  </li>
                </ul>

                {{/each}}

                <div class="taskBtn">
                  <button class="deleteBtn" onclick="deleteOtherExp('{{../type}}', {{index}})">Delete</button>

                  <button class="editBtn" onclick="showOthExpForm('{{../type}}', {{index}})">Edit</button>
                </div>

              </div>

            </div>

            <form id="editOthExpForm{{index}}" class="editForm hiddenForm">

              <label for="dateOther{{index}}">Date:</label>
              <input type="text" id="dateOther{{index}}" name="date" value="{{otherExperience.date}}">

              <br>

              <label for="positionOther{{index}}">Position:</label>
              <input type="text" id="positionOther{{index}}" name="position" value="{{otherExperience.position}}">

              <br>

              <label for="employerOther{{index}}">Employer:</label>
              <input type="text" id="employerOther{{index}}" name="employer" value="{{otherExperience.employer}}">

              <br>

              <label for="locationOther{{index}}">Location:</label>
              <input type="text" id="locationOther{{index}}" name="location" value="{{otherExperience.location}}">

              <br>

              <label for="dutiesAndAchievementsOther{{index}}">Duties and Achievements:</label>

              <br>

              <textarea id="dutiesAndAchievementsOther{{index}}"
                name="dutiesAndAchievements">{{otherExperience.dutiesAndAchievements}}</textarea>

              <br>

              <button class="editBtn" type="button" onclick="saveOthExp('{{../type}}', {{index}})">Save Changes</button>

              <button class="editBtn" type="button" onclick="cancel()">Cancel</button>
            </form>

          </div>

          {{/each}}

        </div>

        <hr>

        <div class="skills">

          <h5 class="skillTitle">SKILLS</h5>

          <div class="skillContent">

            {{#each data.skills as |skills index|}}

            <div class="skillsInner">
              <p class="skillText">||{{skills}}||</p>

              <button class="deleteBtn" onclick="deleteSkill('{{../type}}', {{index}})">Delete</button>

            </div>

            {{/each}}

          </div>

        </div>

        <hr>

        <div class="project">

          <h5 class="projectTitle">PROJECTS</h5>

          {{#each data.projects as |project index|}}

          <div>

            <div class="expBox">

              <h6 class="date">[ {{project.date}} ]</h6>

              <div class="projectInner">
                <p class="title">{{project.title}}</p>
                <p class="details">{{project.details}}</p>
                <p class="link">{{project.link}}</p>

                <div class="taskBtn">
                  <button class="deleteBtn" onclick="deleteProject('{{../type}}', {{index}})">Delete</button>

                  <button class="editBtn" onclick="showProjectForm('{{../type}}', {{index}})">Edit</button>
                </div>

              </div>

            </div>

            <form id="editProjectForm{{index}}" class="editForm hiddenForm">

              <label for="dateProject{{index}}">Date:</label>
              <input type="text" id="dateProject{{index}}" name="date" value="{{project.date}}">

              <br>

              <label for="title{{index}}">Title:</label>
              <input type="text" id="title{{index}}" name="title" value="{{project.title}}">

              <br>

              <label for="details{{index}}">Details:</label>
              <br>
              <textarea id="details{{index}}" class="projectDetail" name="details">{{project.details}}</textarea>

              {{!-- <input type="text" id="details{{index}}" class="projectDetail" name="details"
                value="{{project.details}}"> --}}

              <br>

              <label for="link{{index}}">Link:</label>
              <input type="text" id="link{{index}}" name="link" value="{{project.link}}">

              <br>

              <button class="editBtn" type="button" onclick="saveProject('{{../type}}', {{index}})">Save
                Changes</button>

              <button class="editBtn" type="button" onclick="cancel()">Cancel</button>

            </form>

          </div>

          {{/each}}

        </div>

        <hr>

        <div class="referee">

          <h5 class="refTitle">REFEREES</h5>

          <div class="refContent">

            {{#each data.referees as |referee index|}}

            <div class="refereeInner">
              <p class="name">{{referee.fullName}}</p>
              <p class="phone">+234{{referee.phone}}</p>
              <p class="occupation">{{referee.occupation}}</p>

              <button class="deleteBtn" onclick="deleteReferee('{{../type}}', {{index}})">Delete</button>

              <button class="editBtn" onclick="showRefForm('{{../type}}', {{index}})">Edit</button>

            </div>
            <form id="editRefForm{{index}}" class="editForm hiddenForm">

              <label for="fullName{{index}}">Full Name:</label>
              <input type="text" id="fullName{{index}}" name="fullName" value="{{referee.fullName}}">

              <br>

              <label for="phone{{index}}">Phone:</label>
              <input type="text" id="phone{{index}}" name="phone" value="{{referee.phone}}">

              <br>

              <label for="occupation{{index}}">Occupation:</label>
              <input type="text" id="occupation{{index}}" name="occupation" value="{{referee.occupation}}">

              <br>

              <button class="editBtn" type="button" onclick="saveReferee('{{../type}}', {{index}})">Save
                Changes</button>

              <button class="editBtn" type="button" onclick="cancel()">Cancel</button>

            </form>


            {{/each}}

          </div>

        </div>

      </div>

    </div>

  </section>

  <script>

    //CANCEL BUTTON
    function cancel() {
      location.reload()
    }


    //WORK-EXPERIENCE
    function showExpEditForm(type, index) {
      const allForms = document.querySelectorAll('.editForm');
      allForms.forEach(form => form.classList.add('hiddenForm'));

      const selectedForm = document.getElementById(`editExpForm${index}`);
      selectedForm.classList.remove('hiddenForm');
    }


    async function saveExpChanges(type, index) {
      const date = document.getElementById(`date${index}`).value;
      const position = document.getElementById(`position${index}`).value;
      const employer = document.getElementById(`employer${index}`).value;
      const location = document.getElementById(`location${index}`).value;
      const dutiesAndAchievements = document.getElementById(`dutiesAndAchievements${index}`).value;

      const newData = {
        date,
        position,
        employer,
        location,
        dutiesAndAchievements
      };
      try {
        const response = await fetch('/users/profile/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ type: "workExperience", index: index, newData }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const updatedItem = await response.json();
        console.log("update successful")
        window.location.reload(true)

      } catch (error) {
        console.log('Error:', error);
      }
    }


    async function deleteExperience(type, index) {
      const confirmation = confirm("Are you sure you want to delete this item?");
      try {
        if (confirmation) {
          const response = await fetch("/users/profile/delete", {
            method: 'POST',
            headers: {
              'content-Type': 'application/json'
            },
            body: JSON.stringify({
              type: "workExperience",
              index: index
            }),
          })
          const data = await response.json();
          if (data.success) {
            document.querySelector('.experienceContainer:nth-child(${index + 1})').remove()
          } else {
            console.log("error")
          }
        }
      }
      catch (error) {
        console.log("Error caught")
      }
      location.reload()
    }


    //EDUCATION
    function showEduForm(type, index) {
      const allForms = document.querySelectorAll('.editForm');
      allForms.forEach(form => form.classList.add('hiddenForm'));

      const selectedForm = document.getElementById(`editEduForm${index}`);
      selectedForm.classList.remove('hiddenForm');
    }


    async function saveEdu(type, index) {
      const date = document.getElementById(`dateEdu${index}`).value;
      const institutionAttended = document.getElementById(`instAttended${index}`).value;
      const degree = document.getElementById(`degree${index}`).value;
      const location = document.getElementById(`locationEdu${index}`).value;
      const projectAndAchievement = document.getElementById(`projectAndAchievement${index}`).value;

      const newData = {
        date,
        institutionAttended,
        degree,
        location,
        projectAndAchievement
      };
      try {
        const response = await fetch('/users/profile/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ type: "educationAndTraining", index: index, newData }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const updatedItem = await response.json();
        console.log("update successful")
        window.location.reload(true)

      } catch (error) {
        console.log('Error:', error);
      }
    }


    async function deleteEducation(type, index) {
      const confirmation = confirm("Are you sure you want to delete this item?");
      try {
        if (confirmation) {
          const response = await fetch("/users/profile/delete", {
            method: 'POST',
            headers: {
              'content-Type': 'application/json'
            },
            body: JSON.stringify({
              type: "educationAndTraining",
              index: index
            }),
          })
          const data = await response.json();
          if (data.success) {
            document.querySelector('.educationContainer:nth-child(${index + 1})').remove()
          } else {
            console.log("error")
          }
        }
      }
      catch (error) {
        console.log("Error caught")
      }
      location.reload()
    }


    //PROFESSIONAL ORGANIZATION
    function showProfForm(type, index) {
      const allForms = document.querySelectorAll('.editForm');
      allForms.forEach(form => form.classList.add('hiddenForm'));

      const selectedForm = document.getElementById(`editProfForm${index}`);
      selectedForm.classList.remove('hiddenForm');
    }


    async function saveProf(type, index) {
      const date = document.getElementById(`dateProf${index}`).value;
      const organization = document.getElementById(`organization${index}`).value;
      const certification = document.getElementById(`certification${index}`).value;
      const location = document.getElementById(`locationProf${index}`).value;
      const website = document.getElementById(`website${index}`).value;

      const newData = {
        date,
        organization,
        certification,
        location,
        website
      };
      try {
        const response = await fetch('/users/profile/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ type: "professionalOrganization", index: index, newData }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const updatedItem = await response.json();
        console.log("update successful")
        window.location.reload(true)

      } catch (error) {
        console.log('Error:', error);
      }
    }


    async function deleteProfOrg(type, index) {
      const confirmation = confirm("Are you sure you want to delete this item?");
      try {
        if (confirmation) {
          const response = await fetch("/users/profile/delete", {
            method: 'POST',
            headers: {
              'content-Type': 'application/json'
            },
            body: JSON.stringify({
              type: "professionalOrganization",
              index: index
            }),
          })
          const data = await response.json();
          if (data.success) {
            document.querySelector('.profOrgContainer:nth-child(${index + 1})').remove()
          } else {
            console.log("error")
          }
        }
      }
      catch (error) {
        console.log("Error caught")
      }
      location.reload()
    }


    //OTHER-EXPERIENCE
    function showOthExpForm(type, index) {
      const allForms = document.querySelectorAll('.editForm');
      allForms.forEach(form => form.classList.add('hiddenForm'));

      const selectedForm = document.getElementById(`editOthExpForm${index}`);
      selectedForm.classList.remove('hiddenForm');
    }


    async function saveOthExp(type, index) {
      const date = document.getElementById(`dateOther${index}`).value;
      const position = document.getElementById(`positionOther${index}`).value;
      const employer = document.getElementById(`employerOther${index}`).value;
      const location = document.getElementById(`locationOther${index}`).value;
      const dutiesAndAchievements = document.getElementById(`dutiesAndAchievementsOther${index}`).value;

      const newData = {
        date,
        position,
        employer,
        location,
        dutiesAndAchievements
      };
      try {
        const response = await fetch('/users/profile/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ type: "otherExperience", index: index, newData }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const updatedItem = await response.json();
        console.log("update successful")
        window.location.reload(true)

      } catch (error) {
        console.log('Error:', error);
      }
    }


    async function deleteOtherExp(type, index) {
      const confirmation = confirm("Are you sure you want to delete this item?");
      try {
        if (confirmation) {
          const response = await fetch("/users/profile/delete", {
            method: 'POST',
            headers: {
              'content-Type': 'application/json'
            },
            body: JSON.stringify({
              type: "otherExperience",
              index: index
            }),
          })
          const data = await response.json();
          if (data.success) {
            document.querySelector('.otherExpContainer:nth-child(${index + 1})').remove()
          } else {
            console.log("error")
          }
        }
      }
      catch (error) {
        console.log("Error caught")
      }
      location.reload()
    }


    //REFEREES
    function showRefForm(type, index) {
      const allForms = document.querySelectorAll('.editForm');
      allForms.forEach(form => form.classList.add('hiddenForm'));

      const selectedForm = document.getElementById(`editRefForm${index}`);
      selectedForm.classList.remove('hiddenForm');
    }


    async function saveReferee(type, index) {
      const fullName = document.getElementById(`fullName${index}`).value;
      const phone = document.getElementById(`phone${index}`).value;
      const occupation = document.getElementById(`occupation${index}`).value;

      const newData = {
        fullName,
        phone,
        occupation,
      };
      try {
        const response = await fetch('/users/profile/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ type: "referees", index: index, newData }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const updatedItem = await response.json();
        console.log("update successful")
        window.location.reload(true)
      } catch (error) {
        console.log('Error:', error);
      }
    }


    async function deleteReferee(type, index) {
      const confirmation = confirm("Are you sure you want to delete this item?");
      try {
        if (confirmation) {
          const response = await fetch("/users/profile/delete", {
            method: 'POST',
            headers: {
              'content-Type': 'application/json'
            },
            body: JSON.stringify({
              type: "referees",
              index: index
            }),
          })
          const data = await response.json();
          if (data.success) {
            document.querySelector('.projectContainer:nth-child(${index + 1})').remove()
          } else {
            console.log("error")
          }
        }
      }
      catch (error) {
        console.log("Error caught")
      }
      location.reload()
    }


    //PROJECTS
    function showProjectForm(type, index) {
      const allForms = document.querySelectorAll('.editForm');
      allForms.forEach(form => form.classList.add('hiddenForm'));

      const selectedForm = document.getElementById(`editProjectForm${index}`);
      selectedForm.classList.remove('hiddenForm');
    }


    async function saveProject(type, index) {
      const date = document.getElementById(`dateProject${index}`).value;
      const title = document.getElementById(`title${index}`).value;
      const details = document.getElementById(`details${index}`).value;
      const link = document.getElementById(`link${index}`).value;

      const newData = {
        date,
        title,
        details,
        link
      };
      try {
        const response = await fetch('/users/profile/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ type: "projects", index: index, newData }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const updatedItem = await response.json();
        console.log("update successful")
        window.location.reload(true)
      } catch (error) {
        console.log('Error:', error);
      }
    }


    async function deleteProject(type, index) {
      const confirmation = confirm("Are you sure you want to delete this item?");
      try {
        if (confirmation) {
          const response = await fetch("/users/profile/delete", {
            method: 'POST',
            headers: {
              'content-Type': 'application/json'
            },
            body: JSON.stringify({
              type: "projects",
              index: index
            }),
          })
          const data = await response.json();
          if (data.success) {
            document.querySelector('.projectContainer:nth-child(${index + 1})').remove()
          } else {
            console.log("error")
          }
        }
      }
      catch (error) {
        console.log("Error caught")
      }
      location.reload()
    }


    //SKILLS
    async function deleteSkill(type, index) {
      const confirmation = confirm("Are you sure you want to delete this item?");
      try {
        if (confirmation) {
          const response = await fetch("/users/profile/delete", {
            method: 'POST',
            headers: {
              'content-Type': 'application/json'
            },
            body: JSON.stringify({
              type: "skills",
              index: index
            }),
          })
          const data = await response.json();
          if (data.success) {
            document.querySelector('.skillContainer:nth-child(${index + 1})').remove()
          } else {
            console.log("error")
          }
        }
      }
      catch (error) {
        console.log("Error caught")
      }
      location.reload()
    }


    //LOG-OUT
    const logoutButton = document.querySelector(".logoutButton");
    logoutButton.addEventListener("click", async () => {
      const response = await fetch("/auth/logout", {
        method: "POST"
      });
      if (response.ok) {
        window.location.href = "/home"
      }
    })


    //GREETINGS & TIME
    const greetings = document.getElementById("time");
    const date = new Date()
    const hour = date.getHours()
    function getGreeting() {
      if (hour < 12) {
        return "Good Morning {{ data.firstName }},"
      } else if (hour >= 12 && hour < 18) {
        return "Good Afternoon {{ data.firstName }},"
      } else {
        return "Good Evening {{ data.firstName }},"
      }
    }
    greetings.textContent = getGreeting();


    const time = document.getElementById("currentTime");
    setInterval(() => {
      const newTime = new Date();
      time.innerHTML = newTime.toLocaleString()
    }, 1000)



    //IMAGE UPLOAD
    function previewImage(event) {
      const preview = document.getElementById('previewImage');
      const fileInput = document.getElementById('imageInput');

      const file = fileInput.files[0];

      if (file) {
        const reader = new FileReader();

        reader.onload = function (e) {
          preview.src = e.target.result;
        };

        reader.readAsDataURL(file);
      }
    }

  </script>
</body>

</html>